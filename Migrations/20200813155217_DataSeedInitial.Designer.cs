// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RubiconTask.Database;

namespace RubiconTask.Migrations
{
    [DbContext(typeof(BlogDBContext))]
    [Migration("20200813155217_DataSeedInitial")]
    partial class DataSeedInitial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RubiconTask.Database.Models.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("BlogPosts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "This is migrated data, feel free to delete it",
                            CreatedAt = new DateTime(2020, 8, 13, 17, 52, 16, 901, DateTimeKind.Local).AddTicks(7651),
                            Description = "We're migrating data so everyone who starts the app has it!",
                            Slug = "migrating-data",
                            Title = "Migrating data",
                            UpdatedAt = new DateTime(2020, 8, 13, 17, 52, 16, 906, DateTimeKind.Local).AddTicks(5531)
                        },
                        new
                        {
                            Id = 2,
                            Body = "This is another migrated blogpost so we have more now",
                            CreatedAt = new DateTime(2020, 8, 13, 17, 52, 16, 906, DateTimeKind.Local).AddTicks(6842),
                            Description = "We're migrating some more data so it looks a bit richer",
                            Slug = "another-migrated-data",
                            Title = "Another Migrated Data",
                            UpdatedAt = new DateTime(2020, 8, 13, 17, 52, 16, 906, DateTimeKind.Local).AddTicks(6889)
                        });
                });

            modelBuilder.Entity("RubiconTask.Database.Models.BlogPostTags", b =>
                {
                    b.Property<int>("BlogPostId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("BlogPostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("BlogPostTags");

                    b.HasData(
                        new
                        {
                            BlogPostId = 1,
                            TagId = 1
                        },
                        new
                        {
                            BlogPostId = 1,
                            TagId = 2
                        },
                        new
                        {
                            BlogPostId = 2,
                            TagId = 1
                        },
                        new
                        {
                            BlogPostId = 2,
                            TagId = 3
                        });
                });

            modelBuilder.Entity("RubiconTask.Database.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ios"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AngularJS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Migration"
                        });
                });

            modelBuilder.Entity("RubiconTask.Database.Models.BlogPostTags", b =>
                {
                    b.HasOne("RubiconTask.Database.Models.BlogPost", "BlogPost")
                        .WithMany("BlogPostTags")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RubiconTask.Database.Models.Tag", "Tag")
                        .WithMany("BlogPostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
